import asyncioimport loggingimport requestsimport reimport randomimport timefrom aiogram.dispatcher.filters.state import State, StatesGroupimport timefrom aiogram import Bot, Dispatcher, types, executorfrom aiogram.contrib.fsm_storage.memory import MemoryStoragefrom aiogram.dispatcher import FSMContextfrom aiogram.dispatcher.filters import BoundFilterfrom aiogram.types import Message, InputFile, CallbackQuery, InlineKeyboardMarkup, \	InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, ContentTypefrom LiteSQL import lsqlfrom filters import IsGroupJoinimport datetimefrom loader import bot, dpfrom config import *from test import ThrottlingMiddleware, rate_limitlogging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO)sql = lsql('db')try: sql.select_data(1, 'id')except: sql.create('id, balance, ref, terms, withdraws, registration_date')class IsPrivate(BoundFilter):	async def check(self, m: types.Message):		return m.from_user.id == m.chat.idclass IsNotSub(BoundFilter):	async def check(self, m: types.Message):		uid = m.from_user.id		chatss = []		for i in chats:			status = await bot.get_chat_member(i, uid)			if status.status in ['left', 'kicked']:				chatss.append(1)		return len(chatss) >= 1 and m.from_user.id == m.chat.idu_aye = {}class Cal(BoundFilter):	async def check(self, c: CallbackQuery):		uid = c.from_user.id		try:			t = u_aye[f'{uid}']			if (time.time() - t) < 5:				return True			else:				u_aye[f'{uid}'] = time.time()				return False		except: u_aye[f'{uid}'] = time.time(); return Falseasync def get_now_date():    date = datetime.datetime.today().strftime("%d.%m.%Y")    return dateasync def check_user(id):	try: user = sql.select_data(id, 'id')[0]; return user	except: sql.insert_data([(id, 0.0, 0, 0, 0, (await get_now_date()))], 6); return [id, 0.0, 0, 0, 0, (await get_now_date())]async def update_balance(id, amount, yes=True):	if yes:		a = (await check_user(id))[1]		sql.edit_data('id', id, 'balance', a+amount)	else:		sql.edit_data('id', id, 'balance', amount)async def check_sub(id):	uid = id	chatss = []	for i in chats:		status = await bot.get_chat_member(i, uid)		if status.status in ['left', 'kicked']:			return False			break	return Trueasync def new_ref(id, ref):	await asyncio.sleep(5*60)	a = await check_sub(id)	if not a:		try:			user = await bot.get_chat(id)			nams = f'<a href="tg://user?id={id}">{user.first_name}</a>'			text = f"""‚ùå –£ –≤–∞—Å –º–æ–≥ –±—ã –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–ª {nams}, –Ω–æ –æ–Ω –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç :("""			await bot.send_message(ref, text)		except:			pass		return	sql.edit_data('id', id, 'ref', ref)	user = await bot.get_chat(id)	nams = f'<a href="tg://user?id={id}">{user.first_name}</a>'	text = f"""üìé –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {nams}"""	try:		await bot.send_message(ref, text)		await update_balance(ref, a1_LEVEL)	except:		pass		ref_2 = (await check_user(ref))	if ref_2[2] != 0:		nams = f'<a href="tg://user?id={id}">{user.first_name}</a>'		text = f"""üìé –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–∞ 2 —É—Ä–æ–≤–Ω–µ: {nams}"""		try:			await bot.send_message(ref_2[2], text)			await update_balance(ref_2[2], a2_LEVEL)		except:			pass				ref_3 = (await check_user(ref_2[0]))				if ref_3[2] != 0:			nams = f'<a href="tg://user?id={id}">{user.first_name}</a>'			text = f"""üìé –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–∞ 3 —É—Ä–æ–≤–Ω–µ: {nams}"""			try:				await bot.send_message(ref_3[2], text)				await update_balance(ref_3[2], a3_LEVEL)			except:				passasync def update_withdraws(uid, summ):	a = (await check_user(uid))[4]	sql.edit_data('id', uid, 'withdraws', a + summ)async def get_all_users():	return sql.get_all_data()dp.filters_factory.bind(IsGroupJoin, event_handlers=[dp.chat_member_handlers])print('Enabled')main_kb = ReplyKeyboardMarkup(resize_keyboard=True)main_kb.add('üíº –ü—Ä–æ—Ñ–∏–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')main_kb.add('üöÄ –û –Ω–∞—Å', 'üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')class Wait(StatesGroup):	wait = State()@dp.message_handler(IsPrivate(), state=Wait.wait)async def delete(m: Message, state: FSMContext):	return await m.delete()@dp.message_handler(IsPrivate(), commands=['start'])async def main(m: Message, state: FSMContext):	uid = m.from_user.id	user = await check_user(uid)	chatss = []	for i in chats:		chat = await bot.get_chat(i)		status = await bot.get_chat_member(i, uid)		if status.status in ['left', 'kicked']:			link = await chat.get_url()			chatss.append(f'<a href="{link}">{chat.title}</a>')	if len(chatss) >= 1:		a = "\n".join(chatss)		await Wait.wait.set()		msg = m.text.split()		if len(msg) == 2:			if msg[1].isdigit():				await state.update_data(ref_id=int(msg[1]))			else:				await state.update_data(ref_id=0)		else:			await state.update_data(ref_id=0)		return await m.reply(f'<b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª:</b>\n\n{a}\n\n<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ—Å–ª–µ —á–µ–≥–æ —è —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å!</b>', reply_markup=ReplyKeyboardRemove(), disable_web_page_preview=True)	else:		return await m.reply(f'<b>üåù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {m.from_user.first_name}!</b>\n'							f'<code>üòå –ü—Ä–∏—è—Ç–Ω–æ –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!</code>', reply_markup=main_kb)@dp.chat_member_handler(is_group_join=True, state='*')async def new_user_channel(update: types.ChatMemberUpdated, state: FSMContext):	try: await bot.get_chat(update.new_chat_member.user.id)	except:		try: await state.finish()		except: pass		return	chatss = []	a = await state.get_data()	try:		ref_id = a['ref_id']	except:		ref_id = 0	uid = update.new_chat_member.user.id	for i in chats:		status = await bot.get_chat_member(i, uid)		if status.status in ['left', 'kicked']:			chatss.append(1)	if len(chatss) == 0:		user = await check_user(uid)		try:			await bot.send_message(uid, f'<b>üåù</b>\n'									f'<code>‚ûï –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ , —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É!</code>', reply_markup=main_kb)		except:			pass		try: await state.finish()		except: pass		if user[3] == 0:			sql.edit_data('id', uid, 'terms', 1)			await new_ref(uid, ref_id)@dp.message_handler(IsNotSub(), state='*')async def msg(m: Message, state: FSMContext):	try: await state.finish()	except: pass	chatss = []	uid = m.from_user.id	for i in chats:		chat = await bot.get_chat(i)		status = await bot.get_chat_member(i, uid)		if status.status in ['left', 'kicked']:			link = await chat.get_url()			chatss.append(f'<a href="{link}">{chat.title}</a>')	if len(chatss) >= 1:		a = "\n".join(chatss)		await Wait.wait.set()		await state.update_data(ref_id=0)		return await m.reply(f'<b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª:</b>\n\n{a}\n\n<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ—Å–ª–µ —á–µ–≥–æ —è —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å!</b>', reply_markup=ReplyKeyboardRemove(), disable_web_page_preview=True)withdraws = 0for i in sql.get_all_data():	withdraws += i[4]stats = InlineKeyboardMarkup(row_width=2)a = InlineKeyboardButton(text='ü™ô –¢–æ–ø –ø–æ –≤—ã–≤–æ–¥–∞–º', callback_data='top_withdraws')b = InlineKeyboardButton(text='ü´Ç –¢–æ–ø –ø–æ —Ä–µ—Ñ–∞–º', callback_data='top_refs')c = InlineKeyboardButton(text='üí∞ –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É', callback_data='top_balance')stats.add(a, b, c)def parse2(x: str):    num = float(x.split(':')[1])    return numdef parse(x: str):    num = int(x.split(':')[1])    return num      @dp.callback_query_handler(Cal(), state='*')async def msg(c: CallbackQuery, state: FSMContext):	uid = c.from_user.id	a = u_aye[f"{uid}"]	return await c.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {round(5 - (time.time() - a), 2)} —Å–µ–∫—É–Ω–¥', show_alert=True)@dp.callback_query_handler(text='nazad')async def msg(c: CallbackQuery):	uid = c.from_user.id	try: await state.finish()	except: pass	user = await check_user(uid)	day_users = len(sql.select_data((await get_now_date()), 'registration_date'))	all_users = len(sql.get_all_data())	text = f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üåÄ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b><code>     </code><b>üßë‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{day_users}</code><b>üï∞ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b><code>     </code><b>üßë‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{all_users}</code><code>     </code><b>üí∏ –í—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdraws} RUB</code>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""	await c.message.edit_text(text, reply_markup=stats)@dp.callback_query_handler(text_startswith='top_')async def msg(c: CallbackQuery):	await c.answer('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–∞...', show_alert=False)	a = c.data.split('_')[1]	kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='nazad'))	if a == 'withdraws':		w = [f'{i[0]}:{i[4]}' for i in sql.get_all_data()]		w.sort(key=parse2, reverse=True)				w = w[:10]				text = """**üìä –¢–æ–ø –ø–æ –≤—ã–≤–æ–¥–∞–º —Å –±–æ—Ç–∞:**"""		x = 0		for i in w:			x += 1			uid = int(i.split(':')[0])			summ = float(i.split(':')[1])			try:				user = await bot.get_chat(uid)				name = user.first_name.replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('`', '').replace('*', '').replace('_', '').replace('{', '').replace('}', '').replace('~', '')			except:				name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'			nn = f'[{name}](tg://user?id={uid})'			text += f'{x}. {nn} ‚Äî `{summ} ‚ÇΩ` \n'	elif a == 'balance':		w = [f'{i[0]}:{i[1]}' for i in sql.get_all_data()]		w.sort(key=parse2, reverse=True)				w = w[:10]				text = """**üìä –¢–æ–ø –±–æ–≥–∞—á–µ–π –±–æ—Ç–∞:**"""		x = 0		for i in w:			x += 1			uid = int(i.split(':')[0])			summ = round(float(i.split(':')[1]), 2)			try:				user = await bot.get_chat(uid)				name = user.first_name.replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('`', '').replace('*', '').replace('_', '').replace('{', '').replace('}', '').replace('~', '')			except:				name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'			nn = f'[{name}](tg://user?id={uid})'			text += f'{x}. {nn} ‚Äî `{summ} ‚ÇΩ` \n'	elif a == 'refs':		users = [i[2] for i in sql.get_all_data()]		b = []		for i in [i[0] for i in sql.get_all_data()]:			b.append(f'{i}:{users.count(i)}')		b.sort(key=parse, reverse=True)				b = b[:10]				text = """**üìä –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ –±–æ—Ç–∞:**"""		x = 0		for i in b:			x += 1			uid = int(i.split(':')[0])			summ = int(i.split(':')[1])			try:				user = await bot.get_chat(uid)				name = user.first_name.replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('`', '').replace('*', '').replace('_', '').replace('{', '').replace('}', '').replace('~', '')			except:				name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'			nn = f'[{name}](tg://user?id={uid})'			text += f'{x}. {nn} ‚Äî `{summ} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` \n'	await c.message.edit_text(text, reply_markup=kb, parse_mode='Markdown')		@dp.message_handler(IsPrivate(), lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', state='*')@rate_limit(3, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')async def msg(m: Message, state: FSMContext):	uid = m.from_user.id	try: await state.finish()	except: pass	user = await check_user(uid)	day_users = len(sql.select_data((await get_now_date()), 'registration_date'))	all_users = len(await get_all_users())	text = f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üåÄ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b><code>     </code><b>üßë‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{day_users}</code><b>üï∞ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b><code>     </code><b>üßë‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{all_users}</code><code>     </code><b>üí∏ –í—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdraws} RUB</code>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""	await m.reply(text, reply_markup=stats)zarabot = InlineKeyboardMarkup()zarabot_btn = InlineKeyboardButton(text='üìñ –£—Å–ª–æ–≤–∏—è', callback_data='rules')zarabot.add(zarabot_btn)zarab = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='nazad_zarabot'))@dp.callback_query_handler(text='nazad_zarabot')async def msg(c: CallbackQuery):	uid = c.from_user.id	user = await check_user(uid)	text = f"""<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞—Ö üí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a1_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 1 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a2_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 2 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a3_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 3 —É—Ä–æ–≤–Ω–µüí∏ –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–ª:</b> https://t.me/lxrefbot?start={uid}"""	await c.message.edit_text(text, disable_web_page_preview=True, reply_markup=zarabot)@dp.callback_query_handler(text='rules')async def msg(c: CallbackQuery):	text = """<b>üìé –£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã1. –ù–∞–∫—Ä—É—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞2. –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –æ–Ω –æ—Ç–ø–∏—à–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑, —Ç–æ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∑–∞—â–∏—Ç–∞–Ω –≤–∞–º.3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –≤–∞–º –Ω–µ –ø—Ä–∏–π–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.4. –í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞ QIWI / BTC banker5. –ú—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∏–∫.</b>"""	await c.message.edit_text(text, reply_markup=zarab)@dp.message_handler(IsPrivate(), lambda m: m.text == 'üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', state='*')@rate_limit(3, 'üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')async def msg(m: Message, state: FSMContext):	try: await state.finish()	except: pass	uid = m.from_user.id	user = await check_user(uid)	text = f"""<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞—Ö üí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a1_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 1 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a2_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 2 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a3_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 3 —É—Ä–æ–≤–Ω–µüí∏ –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–ª:</b> https://t.me/lxrefbot?start={uid}"""	await m.reply(text, disable_web_page_preview=True, reply_markup=zarabot)	a = InlineKeyboardButton(text='üí∏ –ö–∞–Ω–∞–ª', url=CHANNEL_LINK)b = InlineKeyboardButton(text='üßë‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü', url=OWNER_LINK)c = InlineKeyboardButton(text='üßÉ –ß–∞—Ç', url=CHAT_LINK)about = InlineKeyboardMarkup(row_width=2)about.add(a, b, c)@dp.message_handler(IsPrivate(), lambda m: m.text == 'üöÄ –û –Ω–∞—Å', state='*')@rate_limit(3, 'üöÄ –û –Ω–∞—Å')async def msg(m: Message, state: FSMContext):	uid = m.from_user.id	try: await state.finish()	except: pass	user = await check_user(uid)		text = """<b>‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è –ù–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω: 21.07.2021‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è –£ –Ω–∞—Å 3-–µ—Ö —É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞:‚ñ™Ô∏è‚ñ™Ô∏è@LORD_CODES‚ñ™Ô∏è‚ñ™Ô∏è@LORD_CODE‚ñ™Ô∏è‚ñ™Ô∏è@ADEKVAT_OV‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è</b>"""	await m.reply(text, reply_markup=about)profile = InlineKeyboardMarkup(row_width=2)a = InlineKeyboardButton(text='üí∞ –í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw')b = InlineKeyboardButton(text='ü•É –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data='zarabotat')profile.add(a, b)@dp.callback_query_handler(text='back')async def msg(c: CallbackQuery):	uid = c.from_user.id	user = await check_user(uid)	ref_name = '–í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª'	if user[2] != 0:		ref_name = (await bot.get_chat(user[2])).title	your_refs = len(sql.select_data('ref', uid))	text = f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üñ± –ê–π–¥–∏:</b> <code>{uid}</code><b>üñ± –ë–∞–ª–∞–Ω—Å:</b> <code>{round(user[1], 2)} RUB</code><b>üñ± –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π:</b> <a href='tg://user?id={user[2]}'>{ref_name}</a><b>üñ± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <code>{user[5]}</code><b>üñ± –í—ã–≤–æ–¥—ã:</b> <code>{user[4]} RUB</code><b>üñ± –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> <code>{your_refs}</code>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""	await c.message.edit_text(text, reply_markup=profile)@dp.callback_query_handler(text='zarabotat')async def msg(c: CallbackQuery):	uid = c.from_user.id	user = await check_user(uid)	kb = InlineKeyboardMarkup().add(zarabot_btn, InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='back'))		text = f"""<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞—Ö üí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a1_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 1 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a2_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 2 —É—Ä–æ–≤–Ω–µüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {a3_LEVEL}‚ÇΩ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–∞ –Ω–∞ 3 —É—Ä–æ–≤–Ω–µüí∏ –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–ª:</b> https://t.me/lxrefbot?start={uid}"""		await c.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)def otmena():	kb = ReplyKeyboardMarkup(resize_keyboard=True)	kb.add('–û—Ç–º–µ–Ω–∞ üîô')	return kbclass Withdraw(StatesGroup):	summ = State()	number = State()@dp.callback_query_handler(text='withdraw')async def msg(c: CallbackQuery):	uid = c.from_user.id	user = await check_user(uid)		if user[1] < 10:		return await c.answer('–ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10‚ÇΩ ‚ùå', show_alert=True)	else:		await c.answer('ü™ô –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥:', show_alert=False)		await c.message.answer('<b>ü™ô –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥:</b>', reply_markup=otmena())		await Withdraw.summ.set()@dp.message_handler(IsPrivate(), state=Withdraw.summ)async def aye(m: Message, state: FSMContext):	if not m.text.isdigit():		await state.finish()		return await m.answer(reply_markup=main_kb, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥. —Ä–∞–∑')		summ = int(m.text)		uid = m.from_user.id	user = await check_user(uid)		if summ < 10:		await state.finish()		return await m.answer(reply_markup=main_kb, text=f'<b>ü•É –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 10‚ÇΩ !</b>')		if user[1] < summ:		await state.finish()		return await m.answer(reply_markup=main_kb, text=f'<b>‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –≤–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{round(user[1], 2)} RUB</code>')		await m.answer(f'<b>ü•ù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ QIWI –∫–æ—à–µ–ª—å–∫–∞</b> (<code>–ü—Ä–∏–º–µ—Ä: +79173819366</code>):\n\n(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ BTC banker, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ @, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)')		await Withdraw.next()	await state.update_data(s=summ)async def log_chat(text):	chat_id = -1001588856204	await bot.send_message(chat_id, text, disable_web_page_preview=True)@dp.message_handler(IsPrivate(), state=Withdraw.number)async def aye(m: Message, state: FSMContext):	if not m.text.isdigit() and not '+' in m.text and not '@' in m.text:		await state.finish()		return await m.answer(reply_markup=main_kb, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥. —Ä–∞–∑')		number = int(m.text)	a = await state.get_data()		summ = a['s']		await state.finish()		uid = m.from_user.id		await update_balance(uid, -summ)		await m.answer(f'''<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖüí∞ –°—É–º–º–∞:</b> <code>{float(summ)} RUB</code><b>üí° –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{number}</code>''', reply_markup=main_kb)	withdraw_kb = InlineKeyboardMarkup(row_width=1)	a = InlineKeyboardButton(text='‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ', callback_data=f'ok_{uid}_{summ}')	b = InlineKeyboardButton(text='üîÑ –í–µ—Ä–Ω—É—Ç—å', callback_data=f'backup_{uid}_{summ}')	c = InlineKeyboardButton(text='‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ', callback_data=f'no_{uid}')	withdraw_kb.add(a, b, c)		await bot.send_message(admin_id, f'<b>üí∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\nüßë‚Äçüíª –û—Ç</b> <a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>\n<b>ü™ô –ù–∞ —Å—É–º–º—É:</b> <code>{summ} RUB</code>', reply_markup=withdraw_kb)		await log_chat(f'<a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥\n<b>ü™ô –ù–∞ —Å—É–º–º—É:</b> <code>{summ} RUB</code>')@dp.message_handler(IsPrivate(), lambda m: m.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å', state='*')@rate_limit(3, 'üíº –ü—Ä–æ—Ñ–∏–ª—å')async def msg(m: Message, state: FSMContext):	uid = m.from_user.id	try: await state.finish()	except: pass	user = await check_user(uid)	ref_name = '–í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª'	if user[2] != 0:		ref_name = (await bot.get_chat(user[2])).title	users = [i[2] for i in sql.get_all_data()]	your_refs = users.count(uid)	text = f"""‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>üñ± –ê–π–¥–∏:</b> <code>{uid}</code><b>üñ± –ë–∞–ª–∞–Ω—Å:</b> <code>{round(user[1], 2)} RUB</code><b>üñ± –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π:</b> <a href='tg://user?id={user[2]}'>{ref_name}</a><b>üñ± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <code>{user[5]}</code><b>üñ± –í—ã–≤–æ–¥—ã:</b> <code>{user[4]} RUB</code><b>üñ± –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> <code>{your_refs}</code>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""	return await m.reply(text, reply_markup=profile)			@dp.callback_query_handler(text_startswith='ok_')async def msg(c: CallbackQuery):	uid = int(c.data.split('_')[1])	summ = float(c.data.split('_')[2])	text = f"""üí∏ <a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> <b>—É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª {summ} RUB</b>"""	await log_chat(text)	text = f"""<b>üí∞ –í–∞–º –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ {summ} RUB–ü—Ä–æ—Å—å–±–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ üíï</b>"""	await bot.send_message(uid, text, reply_markup=about)	await update_withdraws(uid, summ)	await c.answer('–£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ.')	await c.message.delete()@dp.callback_query_handler(text_startswith='backup_')async def msg(c: CallbackQuery):	global withdraws	uid = int(c.data.split('_')[1])	summ = float(c.data.split('_')[2])	withdraws += summ#	text = f"""üí∏ <a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> <b>—É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª {summ} RUB</b>"""#	await log_chat(text)	await update_balance(uid, summ)	text = f"""<b>üí∞ –í–∞–º —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞, –≤—ã–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, —Å—É–º–º–∞: {summ} RUB</b>"""	await bot.send_message(uid, text)	await c.answer('–£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.')	await c.message.delete()@dp.callback_query_handler(text_startswith='no_')async def msg(c: CallbackQuery):	await c.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.')	await c.message.delete()		def otmena():	return types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞')class Rass(StatesGroup):	wait = State()	buttons = State()	vremya = State()@dp.callback_query_handler(text='rass')async def adm_rass(call: types.CallbackQuery):	if call.from_user.id == admin_id:		await Rass.wait.set()		await call.message.answer(f'<b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>', reply_markup=otmena())@dp.message_handler(lambda message: message.text == '–û—Ç–º–µ–Ω–∞', state='*')async def msg(m: types.Message, state: FSMContext):	try: await state.finish(); await m.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_kb)	except: pass@dp.message_handler(state=Rass.wait, content_types=types.ContentTypes.ANY)async def adm_rass(msg: types.Message, state: FSMContext):	await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏\n|–Ω–∞–∑–≤–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞|\n\n(–∏–ª–∏ + —á—Ç–æ–±—ã –Ω–µ —é–∑–∞—Ç—å)', reply_markup=otmena())	await state.update_data(msgs=msg)	await Rass.next()ayeshka = []@dp.message_handler(state=Rass.buttons, content_types=types.ContentTypes.ANY)async def adm_rass(msg: types.Message, state: FSMContext):	a = await state.get_data()	kb = types.InlineKeyboardMarkup()	if msg.text.count('|') >= 3:		a = msg.text.split('|')		text = a[1]		url = a[2]		kb.insert(types.InlineKeyboardButton(text=text, url=url))		ayess = 1		if msg.text.count('\n') == 1:			a = msg.text.split('\n')[1]			a = a.split('|')			text = a[1]			url = a[2]			kb.insert(types.InlineKeyboardButton(text=text, url=url))		kb = kb	await state.update_data(kb=kb)	await msg.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.')	await Rass.next()@dp.message_handler(state=Rass.vremya, content_types=types.ContentTypes.ANY)async def adm_rass(msg: types.Message, state: FSMContext):	a = await state.get_data()	msgs = a['msgs']	plus = []	minus = []	kb = a['kb']	ayess = 0	await state.finish()	await msg.reply(f'–ü–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø–æ—â–µ–Ω —á–µ—Ä–µ–∑ {msg.text} —Å–µ–∫—É–Ω–¥')	await asyncio.sleep(float(msg.text))	row = sql.get_all_data()	for i in row:		try:			if not i[0] in ayeshka:				if ayess == 1:					await msgs.send_copy(int(i[0]), reply_markup=kb)				else:					await msgs.send_copy(int(i[0]))				plus.append(i)		except Exception as e: 			minus.append(i)			if not i[0] in ayeshka:				ayeshka.append(int(i[0]))	return await msg.reply(f'<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(plus)}\n‚ùå –ù–ï–£—Å–ø–µ—à–Ω–æ: {len(minus)}')				@dp.message_handler(lambda m: m.from_user.id == admin_id and m.text.startswith('/info '))async def ayehshshsg(m: types.Message):	uid = int(m.text.split()[1])	await m.answer(f'<a href="tg://user?id={uid}">Permalink</a>')@dp.message_handler(lambda m: m.from_user.id == admin_id and m.text.startswith('/balance '))async def ayehshshsg(m: types.Message):	uid = int(m.text.split()[1])	summ = float(m.text.split()[2])	await update_balance(uid, summ, False)	await m.answer(f'<a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {summ} rub')@dp.message_handler(lambda m: m.from_user.id == admin_id and m.text.startswith('/withdraws '))async def ayehshshsg(m: types.Message):	uid = int(m.text.split()[1])	summ = float(m.text.split()[2])	sql.edit_data('id', uid, 'withdraws', summ)	await m.answer(f'<a href="tg://user?id={uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ –Ω–∞ –≤—ã–≤–æ–¥—ã {summ} rub')@dp.message_handler(lambda m: m.from_user.id == admin_id and m.text == '/admin')async def ayehshshsg(m: types.Message):	admin_kb = types.InlineKeyboardMarkup()	admin_kb.add(types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ üì£', callback_data='rass'))#	admin_kb.add(InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–æ–º üßë‚Äçüíª', callback_data='panel'))	await m.answer(f'<b>–í –±–æ—Ç–µ: {len(sql.get_all_data())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>', reply_markup=admin_kb)msgs = {}async def get_sms(uid):	try: t = msgs[f'{uid}']; return t	except: msgs[f'{uid}'] = 0; return tasync def add_sms(uid):	a = msgs[f'{uid}']	msgs[f'{uid}'] = a + 1@dp.message_handler(lambda m: m.chat.id == -1003442977693, content_types=ContentType.ANY)async def messages(m: Message):	uid = m.from_user.id	if uid in [-1003442977693, -1001588856204, 400753764, 162726413]:		return	sms = await get_sms(uid)	if len(m.text) >= 6:		await add_sms(uid)	sms = await get_sms(uid)	if sms % 5 == 0:		await update_balance(uid, 0.01)		await bot.send_message(uid, '<code>üí∞ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ , –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 0.01‚ÇΩ –∑–∞ 5 –Ω–µ —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.</code>')a = """class Panel(StatesGroup):	user_id = State()@dp.callback_query_handler(text='panel')async def aye(c: CallbackQuery, state: FSMContext):	m = c.message	await m.reply('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞:', reply_markup=otmena())	await Panel.user_id.set()@dp.message_handler(state=Panel.user_id)async def aye(m: Message, state: FSMContext):	try:		uid = int(m.text)		await m.reply(f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <a href="tg://user?id={uid}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</a>\n\n–ë–∞–ª–∞–Ω—Å: {round(user[1], 2)}', reply_markup=aye)		await state.finish()	except:		await m.reply('error', reply_markup=main_kb)		await state.finish()"""a = """async def get_time(uid):	try: a = a_id_id[f'{uid}']; return a	except: a_id_id[f'{uid}'] = time.time(); return time.time()async def nick_time():	while True:		await asyncio.sleep(3600)		now_time = time.time()		users = []		for i in (await get_all_users()):			if (now_time - (await get_time(uid))) >= 86400:				users.append(uid)	    for i in users:	        await update_balance(uid, 1)	        await bot.send_message(i, '–¢—ã –ø–æ–ª—É—á–∏–ª 1‚ÇΩ –∑–∞, —Ç–æ —á—Ç–æ –ø—Ä–æ–¥–µ—Ä–∂–∞–ª #LXREF –≤ –Ω–∏–∫–µ 24 —á–∞—Å–∞.')"""	    	        if __name__ == '__main__':#	loop = asyncio.get_event_loop()#    loop.create_task(nick_time())	dp.middleware.setup(ThrottlingMiddleware())	executor.start_polling(dp, allowed_updates=['chat_member', 'message', 'callback_query', 'chat', 'member'])	